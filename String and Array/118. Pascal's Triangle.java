/*
Given numRows, generate the first numRows of Pascal's triangle.

For example, given numRows = 5,
Return

[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
*/
public class Solution {
    // public List<List<Integer>> generate(int numRows) {
    //     List<List<Integer>> result = new ArrayList<List<Integer>>();
    //         if(numRows == 0)
    //             return result;
    //         ArrayList<Integer> first = new ArrayList<Integer>();
    //         first.add(1);
    //         result.add(first);
            
    //         for(int n = 2; n <= numRows; n++){
    //             ArrayList<Integer> thisRow = new ArrayList<Integer>();
    //             //the first element of a new row is one
    //             thisRow.add(1);
    //             //the middle elements are generated by the values of the previous rows
    //             //A(n+1)[i] = A(n)[i - 1] + A(n)[i]
    //             List<Integer> previousRow = result.get(n- 2);
    //             for(int i = 1; i < n - 1; i++){
    //                 thisRow.add(previousRow.get(i - 1) + previousRow.get(i));
    //             }
    //             //the last element of a new row is also one
    //             thisRow.add(1);
    //             result.add(thisRow);
    //         }
            
    //         return result;
    //     }
    // }
    // public List<List<Integer>> generate(int numRows) {
    //     if(numRows == 0) {
    //         return new ArrayList<List<Integer>>();
    //     }
    //     ArrayList<List<Integer>> ans = new ArrayList<List<Integer>>();
    //     ArrayList<Integer> al = new ArrayList<Integer>();
    //     al.add(1);
    //     ans.add(al);
    //     if(numRows > 1) {
    //         al = new ArrayList<Integer>();
    //         al.add(1);
    //         al.add(1);
    //         ans.add(al);
    //         Queue<Integer> queue = new LinkedList<Integer>();
    //         queue.offer(1);
    //         queue.offer(1);
    //         System.out.println("queue---->" + queue);
    //         int last = 0;
    //         int cur = 0;
    //         for(int i = 2; i < numRows; i++) {
    //             al = new ArrayList<Integer>();
    //             cur = 0;
    //             last = queue.size();
    //             queue.offer(1);
    //             al.add(1);
    //             while(cur < last) {
    //                 int tmp = queue.poll() + queue.poll();
    //                 queue.offer(tmp);
    //                 queue.offer(tmp);
    //                 al.add(tmp);
    //                 cur = cur + 2;
    //             }
    //             queue.offer(1);
    //             System.out.println(queue);
    //             al.add(1);
    //             ans.add(al);
    //         }
    //     }
    //     return ans;
    // }
    
    public List<List<Integer>> generate(int numRows) {
        if(numRows == 0) {
            return new ArrayList<List<Integer>>();
        }
        ArrayList<List<Integer>> ans = new ArrayList<List<Integer>>();
        ArrayList<Integer> al = new ArrayList<Integer>();
        al.add(1);
        ans.add(al);
        System.out.println(ans);
        if(numRows > 1) {
            al = new ArrayList<Integer>();
            al.add(1);
            al.add(1);
            ans.add(al);
            for(int i = 2; i < numRows; i++) {
                ArrayList<Integer> al2 = (ArrayList) ans.get(i - 1);
                al = new ArrayList<Integer>();
                al.add(1);
                for(int j = 0; j < al2.size() - 1; j++) {
                    al.add(al2.get(j) + al2.get(j + 1));
                }
                al.add(1);
                ans.add(al);
            }
        }
        return ans;
    }
}